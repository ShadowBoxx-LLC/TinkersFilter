buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
        maven { url = "https://files.minecraftforge.net/maven" }
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'

repositories {
    flatDir {
      dirs '../TConstruct/build/libs'
    }
    maven {
      name 'DVS1 Maven FS'
      url 'http://dvs1.progwml6.com/files/maven'
    }
    maven {
      name = "json"
      url = "https://mvnrepository.com/artifact/org.json/json"
    }
}

version = "${minecraft_version}-${mod_version}"
group = "${mod_group}"
archivesBaseName = "${mod_basename}"

sourceCompatibility = targetCompatibility = '1.8'
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = "${minecraft_version}-${forge_version}"
    runDir = "run"
    mappings = "snapshot_20171003"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

dependencies {
    compile "org.json:json:20200518"

    deobfCompile ("slimeknights:TConstruct:${minecraft_version}-${tconstruct_version}") {
        exclude group: 'mezz.jei'
    }

    deobfCompile ("slimeknights.mantle:Mantle:${minecraft_version_short}-${mantle_version}") {
        exclude group: 'mezz.jei'
    }
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

sourceSets {
    main {
        resources {
            srcDir 'resources'
        }
    }
}

// Add Access Transformers Manifest
jar {
    manifest {
        attributes 'FMLAT': 'tconstruct_at.cfg'
    }
    
    finalizedBy reobfJar
}

// Create deobf dev jars
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
  manifest {
        attributes 'FMLAT': 'tconstruct_at.cfg'
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

artifacts {
    archives deobfJar
    archives sourcesJar
}

// verify the properties exist.. or initialize.
if (!project.hasProperty("keystore_location")) // keystore location
    ext.keystore_location = "."
    
if (!project.hasProperty("keystore_user_alias")) // keystore user alias
    ext.keystore_user_alias = ""
if (!project.hasProperty("sftp_username"))
    ext.sftp_username = ""
if (!project.hasProperty("sftp_key"))
    ext.sftp_key = ""
if (!project.hasProperty("keystore_user_password")) // keystore user pass
    ext.keystore_user_password = ""
if (System.getenv().KSK_PW != null)
  ext.keystore_user_password =System.getenv().KSK_PW


task("uploadJars", dependsOn:"build") {
    
    description = "uploads JARs"

    if (project.hasProperty("local_maven") || project.hasProperty("sftp_maven")) {
      apply plugin: 'maven'
        uploadArchives {
            repositories {
          if(project.hasProperty("local_maven"))
          {
                    mavenDeployer {
                        repository(url: "file://${local_maven}")
            }
                }
        if(project.hasProperty("sftp_maven")) {
                    repositories.mavenDeployer {
              configuration = configurations.deployerJars
                        repository(url: "sftp://${sftp_maven}"){
            authentication(userName: "${sftp_username}",privateKey: "${sftp_key}")}
            }
                }
            }
        }    
    }
}

task signUniversal(type: SignJar, dependsOn: 'jar') {
    onlyIf {
        project.hasProperty('jarsigner')
    }

    def jarsigner = [:]

    if (project.hasProperty('jarsigner'))
        jarsigner = project.jarsigner

    alias = 'tcon'
    storePass = jarsigner.storepass
    keyPass = jarsigner.keypass
    keyStore = jarsigner.keystore
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}
uploadArchives.dependsOn signUniversal
build.dependsOn signUniversal
